diff --git a/setup.py b/setup.py
index 422524bd..14a6b720 100644
--- a/setup.py
+++ b/setup.py
@@ -16,6 +16,7 @@ EXTRAS_REQUIRE = {
     'prctl': ['python_prctl'],  # Named threads
     'qrcode': ['qrcode'],
     'sound;platform_system=="Windows"': ['winsound'],
+    'tor': ['stem'],
     'docs': [
         'sphinx',  # fab build_docs
         'graphviz',  # fab build_docs
@@ -128,6 +129,9 @@ if __name__ == "__main__":
         ext_modules=[bitmsghash],
         zip_safe=False,
         entry_points={
+            'bitmessage.nodes.validator': [
+                'onion = pybitmessage.plugins.validator_onion [tor]'
+            ],
             'bitmessage.gui.menu': [
                 'address.qrcode = pybitmessage.plugins.menu_qrcode [qrcode]'
             ],
diff --git a/src/knownnodes.py b/src/knownnodes.py
index 6ccb7daa..7625acfc 100644
--- a/src/knownnodes.py
+++ b/src/knownnodes.py
@@ -8,10 +8,12 @@ import pickle
 import threading
 import time
 
+import protocol
 import state
 from bmconfigparser import BMConfigParser
 from debug import logger
 from helper_bootstrap import dns
+from plugins.plugin import get_plugins
 
 knownNodesLock = threading.Lock()
 knownNodes = {stream: {} for stream in range(1, 4)}
@@ -39,6 +41,8 @@ DEFAULT_NODES_ONION = (
     state.Peer('quzwelsuziwqgpt2.onion', 8444),
 )
 
+check_plugins = get_plugins('nodes.validator') or []
+
 
 def json_serialize_knownnodes(output):
     """
@@ -214,6 +218,11 @@ def cleanupKnownNodes():
                         needToWriteKnownNodesToDisk = True
                         del knownNodes[stream][node]
                         continue
+                    # check hosts by pluggable validators
+                    for check in check_plugins:
+                        print('check %s with %s' % (node, check))
+                        if not check(node):
+                            del knownNodes[stream][node]
                 except TypeError:
                     logger.warning('Error in %s', node)
             keys = []
diff --git a/src/protocol.py b/src/protocol.py
index fd37dc44..f57466c0 100644
--- a/src/protocol.py
+++ b/src/protocol.py
@@ -186,14 +186,17 @@ def haveSSL(server=False):
 def checkSocksIP(host):
     """Predicate to check if we're using a SOCKS proxy"""
     try:
-        if state.socksIP is None or not state.socksIP:
-            state.socksIP = socket.gethostbyname(BMConfigParser().get("bitmessagesettings", "sockshostname"))
+        if not state.socksIP:
+            state.socksIP = socket.gethostbyname(
+                BMConfigParser().get("bitmessagesettings", "sockshostname"))
     # uninitialised
     except NameError:
-        state.socksIP = socket.gethostbyname(BMConfigParser().get("bitmessagesettings", "sockshostname"))
+        state.socksIP = socket.gethostbyname(
+            BMConfigParser().get("bitmessagesettings", "sockshostname"))
     # resolving failure
     except socket.gaierror:
-        state.socksIP = BMConfigParser().get("bitmessagesettings", "sockshostname")
+        state.socksIP = BMConfigParser().get(
+            "bitmessagesettings", "sockshostname")
     return state.socksIP == host
 
 
